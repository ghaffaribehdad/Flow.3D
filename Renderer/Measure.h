#ifndef __TUM3D__MEASURE_H__
#define __TUM3D__MEASURE_H__


#include <global.h>

#include <string>


enum eMeasure
{
	MEASURE_VELOCITY=0,
	MEASURE_VELOCITY_Z,
	MEASURE_TEMPERATURE,
	MEASURE_VORTICITY,
	MEASURE_LAMBDA2,
	MEASURE_QHUNT,
	MEASURE_DELTACHONG,
	MEASURE_ENSTROPHY_PRODUCTION,
	MEASURE_STRAIN_PRODUCTION,
	MEASURE_SQUARE_ROTATION,
	MEASURE_SQUARE_RATE_OF_STRAIN,
	MEASURE_TRACE_JJT,
	MEASURE_PVA,
	MEASURE_HEAT_CURRENT,
	MEASURE_HEAT_CURRENT_X,
	MEASURE_HEAT_CURRENT_Y,
	MEASURE_HEAT_CURRENT_Z,
	MEASURE_CURRENT_CELL,
	MEASURE_LONGEST_CELL,
	MEASURE_TIME_IN_CURRENT_CELL,
	MEASURE_COUNT,
	MEASURE_FORCE32 =  0xFFFFFFFF
};
const size_t NUM_MEASURES = static_cast<size_t>(MEASURE_TIME_IN_CURRENT_CELL) + 1;

const char* GetMeasureName(eMeasure mode);
eMeasure GetMeasureFromName(const std::string& name);
float GetDefaultMeasureScale(eMeasure mode);
float GetDefaultMeasureQuantStep(eMeasure mode);

enum eMeasureSource
{
	MEASURE_SOURCE_RAW=0,
	MEASURE_SOURCE_HEAT_CURRENT,
	MEASURE_SOURCE_JACOBIAN,
	MEASURE_SOURCE_COUNT,
	MEASURE_SOURCE_FORCE32 = 0xFFFFFFFF
};
eMeasureSource GetMeasureSource(eMeasure mode);

enum eMeasureComputeMode
{
	MEASURE_COMPUTE_ONTHEFLY=0,
	MEASURE_COMPUTE_PRECOMP_DISCARD,
	MEASURE_COMPUTE_PRECOMP_STORE_GPU,
	//? MEASURE_COMPUTE_PRECOMP_STORE_CPU,
	MEASURE_COMPUTE_PRECOMP_COMPRESS,
	MEASURE_COMPUTE_COUNT,
	MEASURE_COMPUTE_FORCE32 = 0xFFFFFFFF
};
const char* GetMeasureComputeModeName(eMeasureComputeMode mode);
eMeasureComputeMode GetMeasureComputeModeFromName(const std::string& name);


#endif
